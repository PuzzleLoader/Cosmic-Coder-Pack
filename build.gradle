import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "java"
    id "application"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "de.undercouch.download" version "5.6.0"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    implementation "games.rednblack.miniaudio:miniaudio:$miniaudioVersion"
    implementation "games.rednblack.miniaudio:miniaudio:$miniaudioVersion:natives-desktop"
}

jar {
    archiveBaseName = "DEV-Cosmic Reach"
}

shadowJar {
    archiveFileName = "Cosmic Reach-${baseCrVersion}.jar"

    manifest {
        attributes(
                "Main-Class": "finalforeach.cosmicreach.lwjgl3.Lwjgl3Launcher"
        )
    }
}

tasks.register("setupWorkspace") {
    group = "cosmic_coder_pack"

    dependsOn("cleanUpAfter")
}

tasks.register("downloadCosmicCodeGen", Download) {
    group = "dont-touch--cosmic_coder_pack"

    OSType type = getOperatingSystemType()

    if (type == OSType.MacOS || type == OSType.Other) {
        System.out.println("NUH UH")
        System.exit(6969)
    }

    String url = "https://github.com/PuzzleLoader/CosmicSourceUtils/releases/download/${cosmicCodeGenVersion}/CosmicSourceGenerator.exe"
    if (cosmicCodeGenVersion != "1.0.0") {
        url = "https://github.com/PuzzleLoader/CosmicSourceUtils/releases/download/${cosmicCodeGenVersion}/${type == OSType.Windows ? "WINDOWS" : "LINUX"}_CosmicSRCUtil${type == OSType.Windows ? ".exe": ""}"
    }
    src(url)
    acceptAnyCertificate(true)
    new File("$projectDir/build/tmp").mkdirs()
    dest("$projectDir/build/tmp/CosmicSRCUtil${type == OSType.Windows ? ".exe": ""}")
}

tasks.register("downloadBasePatches", Download) {
    group = "dont-touch--cosmic_coder_pack"

    //TODO: FINISH
}

tasks.register("runCosmicCodeGen", Exec) {
    group = "dont-touch--cosmic_coder_pack"
    dependsOn("downloadCosmicCodeGen")

    OSType type = getOperatingSystemType()

    if (type == OSType.Linux) {
        exec {
            workingDir "$projectDir"
            commandLine("chmod +x $projectDir/build/tmp/CosmicSRCUtil")
        }
    }

    workingDir "$projectDir"
    commandLine "$projectDir/build/tmp/CosmicSRCUtil${type == OSType.Windows ? ".exe": ""}", "-d", baseCrVersion
}

tasks.register("cleanUpAfter") {
    group = "dont-touch--cosmic_coder_pack"

    dependsOn("runCosmicCodeGen")
    new File("$projectDir/build/tmp/CosmicSRCUtil${getOperatingSystemType() == OSType.Windows ? ".exe": ""}").delete()
}

application {
    mainClass = "finalforeach.cosmicreach.lwjgl3.Lwjgl3Launcher"
}

tasks.register("runCosmicReach", JavaExec) {
    group = "cosmic_coder_pack"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "finalforeach.cosmicreach.lwjgl3.Lwjgl3Launcher"
}

tasks.register("createDevJar", Jar) {
    group = "cosmic_coder_pack"
    archiveFileName = "DEV-Cosmic Reach-${baseCrVersion}.jar"

    dependsOn "compileJava"
    from sourceSets.main.output

    manifest {
        attributes(
                "Main-Class": "finalforeach.cosmicreach.lwjgl3.Lwjgl3Launcher"
        )
    }
}

tasks.register("createReleaseJar", ShadowJar) {
    group = "cosmic_coder_pack"
    archiveFileName = "Cosmic Reach-${baseCrVersion}.jar"

    dependsOn "compileJava"
    from sourceSets.main.runtimeClasspath

    manifest {
        attributes(
                "Main-Class": "finalforeach.cosmicreach.lwjgl3.Lwjgl3Launcher"
        )
    }
}

tasks.register("createSourcesJar", ShadowJar) {
    group = "cosmic_coder_pack"
    archiveFileName = "Cosmic Reach-${baseCrVersion}-Source.jar"

    from sourceSets.main.allSource
}

public enum OSType {
    Windows, MacOS, Linux, Other
};
public static OSType getOperatingSystemType() {
    OSType detectedOS;
    if (detectedOS == null) {
        String OS = System.getProperty("os.name", "generic").toLowerCase(Locale.ENGLISH);
        if ((OS.indexOf("mac") >= 0) || (OS.indexOf("darwin") >= 0)) {
            detectedOS = OSType.MacOS;
        } else if (OS.indexOf("win") >= 0) {
            detectedOS = OSType.Windows;
        } else if (OS.indexOf("nux") >= 0) {
            detectedOS = OSType.Linux;
        } else {
            detectedOS = OSType.Other;
        }
    }
    return detectedOS;
}